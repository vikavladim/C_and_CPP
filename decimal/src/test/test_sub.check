#test vv_sub_1
vv_decimal src1, src2, origin;
   int code_check = 0; int code =0;
// src1 = 2;
  // src2 = -3;
src1.bits[0] = 0b00000000000000000000000000000010;
  src1.bits[1] = 0b00000000000000000000000000000000;
  src1.bits[2] = 0b00000000000000000000000000000000;
  src1.bits[3] = 0b00000000000000000000000000000000;
src2.bits[0] = 0b00000000000000000000000000000011;
  src2.bits[1] = 0b00000000000000000000000000000000;
  src2.bits[2] = 0b00000000000000000000000000000000;
  src2.bits[3] = 0b10000000000000000000000000000000;
  vv_decimal result = {0};
  code = vv_sub(src1, src2, &result);
origin.bits[0] = 0b00000000000000000000000000000101;
  origin.bits[1] = 0b00000000000000000000000000000000;
  origin.bits[2] = 0b00000000000000000000000000000000;
  origin.bits[3] = 0b00000000000000000000000000000000;
  int check = vv_is_equal(origin, result);
ck_assert_int_eq(1, check);
    ck_assert_int_eq(code_check, code);
#test vv_sub_2
  vv_decimal src1, src2, origin;
   int code_check = 0; int code =0;
  // src1 = 3;
  // src2 = -2;
  src1.bits[0] = 0b00000000000000000000000000000011;
  src1.bits[1] = 0b00000000000000000000000000000000;
  src1.bits[2] = 0b00000000000000000000000000000000;
  src1.bits[3] = 0b00000000000000000000000000000000;
  src2.bits[0] = 0b00000000000000000000000000000010;
  src2.bits[1] = 0b00000000000000000000000000000000;
  src2.bits[2] = 0b00000000000000000000000000000000;
  src2.bits[3] = 0b10000000000000000000000000000000;
  vv_decimal result = {0};
  code = vv_sub(src1, src2, &result);
  origin.bits[0] = 0b00000000000000000000000000000101;
  origin.bits[1] = 0b00000000000000000000000000000000;
  origin.bits[2] = 0b00000000000000000000000000000000;
  origin.bits[3] = 0b00000000000000000000000000000000;
  int check = vv_is_equal(origin, result);
    ck_assert_int_eq(1, check);
    ck_assert_int_eq(code_check, code);
#test vv_sub_3
vv_decimal src1, src2, origin;
   int code_check = 0; int code =0;
  // src1 = 0;
  // src2 = -3;
  src1.bits[0] = 0b00000000000000000000000000000000;
  src1.bits[1] = 0b00000000000000000000000000000000;
  src1.bits[2] = 0b00000000000000000000000000000000;
  src1.bits[3] = 0b00000000000000000000000000000000;
  src2.bits[0] = 0b00000000000000000000000000000011;
  src2.bits[1] = 0b00000000000000000000000000000000;
  src2.bits[2] = 0b00000000000000000000000000000000;
  src2.bits[3] = 0b10000000000000000000000000000000;
  vv_decimal result = {0};
  code = vv_sub(src1, src2, &result);
  origin.bits[0] = 0b00000000000000000000000000000011;
  origin.bits[1] = 0b00000000000000000000000000000000;
  origin.bits[2] = 0b00000000000000000000000000000000;
  origin.bits[3] = 0b00000000000000000000000000000000;
  int check = vv_is_equal(origin, result);
    ck_assert_int_eq(1, check);
    ck_assert_int_eq(code_check, code);
#test vv_sub_4
  vv_decimal src1, src2, origin;
   int code_check = 0; int code =0;
  // src1 = 2;
  // src2 = 0;
  src1.bits[0] = 0b00000000000000000000000000000010;
  src1.bits[1] = 0b00000000000000000000000000000000;
  src1.bits[2] = 0b00000000000000000000000000000000;
  src1.bits[3] = 0b00000000000000000000000000000000;
  src2.bits[0] = 0b00000000000000000000000000000000;
  src2.bits[1] = 0b00000000000000000000000000000000;
  src2.bits[2] = 0b00000000000000000000000000000000;
  src2.bits[3] = 0b00000000000000000000000000000000;
  vv_decimal result = {0};
  code = vv_sub(src1, src2, &result);
  origin.bits[0] = 0b00000000000000000000000000000010;
  origin.bits[1] = 0b00000000000000000000000000000000;
  origin.bits[2] = 0b00000000000000000000000000000000;
  origin.bits[3] = 0b00000000000000000000000000000000;
  int check = vv_is_equal(origin, result);
    ck_assert_int_eq(1, check);
    ck_assert_int_eq(code_check, code);
#test vv_sub_5
  vv_decimal src1, src2, origin;
   int code_check = 0; int code =0;
  // src1 = 0;
  // src2 = -3;
  src1.bits[0] = 0b00000000000000000000000000000000;
  src1.bits[1] = 0b00000000000000000000000000000000;
  src1.bits[2] = 0b00000000000000000000000000000000;
  src1.bits[3] = 0b00000000000000000000000000000000;
  src2.bits[0] = 0b00000000000000000000000000000011;
  src2.bits[1] = 0b00000000000000000000000000000000;
  src2.bits[2] = 0b00000000000000000000000000000000;
  src2.bits[3] = 0b10000000000000000000000000000000;
  vv_decimal result = {0};
  code = vv_sub(src1, src2, &result);
  origin.bits[0] = 0b00000000000000000000000000000011;
  origin.bits[1] = 0b00000000000000000000000000000000;
  origin.bits[2] = 0b00000000000000000000000000000000;
  origin.bits[3] = 0b00000000000000000000000000000000;
  int check = vv_is_equal(origin, result);
    ck_assert_int_eq(1, check);
    ck_assert_int_eq(code_check, code);
#test vv_sub_6
vv_decimal src1, src2, origin;
   int code_check = 0; int code =0;
  // src1 = 2;
  // src2 = 0;
  src1.bits[0] = 0b00000000000000000000000000000010;
  src1.bits[1] = 0b00000000000000000000000000000000;
  src1.bits[2] = 0b00000000000000000000000000000000;
  src1.bits[3] = 0b00000000000000000000000000000000;
  src2.bits[0] = 0b00000000000000000000000000000000;
  src2.bits[1] = 0b00000000000000000000000000000000;
  src2.bits[2] = 0b00000000000000000000000000000000;
  src2.bits[3] = 0b00000000000000000000000000000000;
  vv_decimal result = {0};
  code = vv_sub(src1, src2, &result);
  origin.bits[0] = 0b00000000000000000000000000000010;
  origin.bits[1] = 0b00000000000000000000000000000000;
  origin.bits[2] = 0b00000000000000000000000000000000;
  origin.bits[3] = 0b00000000000000000000000000000000;
  int check = vv_is_equal(origin, result);
    ck_assert_int_eq(1, check);
    ck_assert_int_eq(code_check, code);
#test vv_sub_7
  vv_decimal src1, src2, origin;
   int code_check = 0; int code =0;
  // src1 = 6521;
  // src2 = -74121;
  src1.bits[0] = 0b00000000000000000001100101111001;
  src1.bits[1] = 0b00000000000000000000000000000000;
  src1.bits[2] = 0b00000000000000000000000000000000;
  src1.bits[3] = 0b00000000000000000000000000000000;
  src2.bits[0] = 0b00000000000000010010000110001001;
  src2.bits[1] = 0b00000000000000000000000000000000;
  src2.bits[2] = 0b00000000000000000000000000000000;
  src2.bits[3] = 0b10000000000000000000000000000000;
  vv_decimal result = {0};
  code = vv_sub(src1, src2, &result);
  origin.bits[0] = 0b00000000000000010011101100000010;
  origin.bits[1] = 0b00000000000000000000000000000000;
  origin.bits[2] = 0b00000000000000000000000000000000;
  origin.bits[3] = 0b00000000000000000000000000000000;
  int check = vv_is_equal(origin, result);ck_assert_int_eq(1, check);
    ck_assert_int_eq(code_check, code);
#test vv_sub_8
  vv_decimal src1, src2, origin;
   int code_check = 0; int code =0;
  // src1 = 4;
  // src2 = -97623323;
  src1.bits[0] = 0b00000000000000000000000000000100;
  src1.bits[1] = 0b00000000000000000000000000000000;
  src1.bits[2] = 0b00000000000000000000000000000000;
  src1.bits[3] = 0b00000000000000000000000000000000;
  src2.bits[0] = 0b00000101110100011001110100011011;
  src2.bits[1] = 0b00000000000000000000000000000000;
  src2.bits[2] = 0b00000000000000000000000000000000;
  src2.bits[3] = 0b10000000000000000000000000000000;
  vv_decimal result = {0};
  code = vv_sub(src1, src2, &result);
origin.bits[0] = 0b00000101110100011001110100011111;
  origin.bits[1] = 0b00000000000000000000000000000000;
  origin.bits[2] = 0b00000000000000000000000000000000;
  origin.bits[3] = 0b00000000000000000000000000000000;
  int check = vv_is_equal(origin, result);
    ck_assert_int_eq(1, check);
    ck_assert_int_eq(code_check, code);
#test vv_sub_9
  vv_decimal src1, src2, origin;
   int code_check = 0; int code =0;
  // src1 = 65658654;
  // src2 = -5;
  src1.bits[0] = 0b00000011111010011101111100011110;
  src1.bits[1] = 0b00000000000000000000000000000000;
  src1.bits[2] = 0b00000000000000000000000000000000;
  src1.bits[3] = 0b00000000000000000000000000000000;
  src2.bits[0] = 0b00000000000000000000000000000101;
  src2.bits[1] = 0b00000000000000000000000000000000;
  src2.bits[2] = 0b00000000000000000000000000000000;
  src2.bits[3] = 0b10000000000000000000000000000000;
  vv_decimal result = {0};
  code = vv_sub(src1, src2, &result);
  origin.bits[0] = 0b00000011111010011101111100100011;
  origin.bits[1] = 0b00000000000000000000000000000000;
  origin.bits[2] = 0b00000000000000000000000000000000;
  origin.bits[3] = 0b00000000000000000000000000000000;
  int check = vv_is_equal(origin, result);
    ck_assert_int_eq(1, check);
    ck_assert_int_eq(code_check, code);
#test vv_sub_10
  vv_decimal src1, src2, origin;
   int code_check = 0; int code =0;
  // src1 = -364748;
  // src2 = -1;
  src1.bits[0] = 0b00000000000001011001000011001100;
  src1.bits[1] = 0b00000000000000000000000000000000;
  src1.bits[2] = 0b00000000000000000000000000000000;
  src1.bits[3] = 0b10000000000000000000000000000000;
  src2.bits[0] = 0b00000000000000000000000000000001;
  src2.bits[1] = 0b00000000000000000000000000000000;
  src2.bits[2] = 0b00000000000000000000000000000000;
  src2.bits[3] = 0b10000000000000000000000000000000;
  vv_decimal result = {0};
  code = vv_sub(src1, src2, &result);
  origin.bits[0] = 0b00000000000001011001000011001011;
  origin.bits[1] = 0b00000000000000000000000000000000;
  origin.bits[2] = 0b00000000000000000000000000000000;
  origin.bits[3] = 0b10000000000000000000000000000000;
  int check = vv_is_equal(origin, result);
    ck_assert_int_eq(1, check);
    ck_assert_int_eq(code_check, code);
#test vv_sub_11
  vv_decimal src1, src2, origin;
   int code_check = 0; int code =0;
  // src1 = 1;
  // src2 = -98745654321;
  src1.bits[0] = 0b00000000000000000000000000000001;
  src1.bits[1] = 0b00000000000000000000000000000000;
  src1.bits[2] = 0b00000000000000000000000000000000;
  src1.bits[3] = 0b00000000000000000000000000000000;
  src2.bits[0] = 0b11111101101100110001110000110001;
  src2.bits[1] = 0b00000000000000000000000000010110;
  src2.bits[2] = 0b00000000000000000000000000000000;
  src2.bits[3] = 0b10000000000000000000000000000000;
  vv_decimal result = {0};
  code = vv_sub(src1, src2, &result);
  origin.bits[0] = 0b11111101101100110001110000110010;
  origin.bits[1] = 0b00000000000000000000000000010110;
  origin.bits[2] = 0b00000000000000000000000000000000;
  origin.bits[3] = 0b00000000000000000000000000000000;
  int check = vv_is_equal(origin, result);
    ck_assert_int_eq(1, check);
    ck_assert_int_eq(code_check, code);
#test vv_sub_12
  vv_decimal src1, src2, origin;
   int code_check = 0; int code =0;
  // src1 = -9878798789;
  // src2 = 3;
  src1.bits[0] = 0b01001100110100101000000111000101;
  src1.bits[1] = 0b00000000000000000000000000000010;
  src1.bits[2] = 0b00000000000000000000000000000000;
  src1.bits[3] = 0b10000000000000000000000000000000;
  src2.bits[0] = 0b00000000000000000000000000000011;
  src2.bits[1] = 0b00000000000000000000000000000000;
  src2.bits[2] = 0b00000000000000000000000000000000;
  src2.bits[3] = 0b00000000000000000000000000000000;
  vv_decimal result = {0};
  code = vv_sub(src1, src2, &result);
  origin.bits[0] = 0b01001100110100101000000111001000;
  origin.bits[1] = 0b00000000000000000000000000000010;
  origin.bits[2] = 0b00000000000000000000000000000000;
  origin.bits[3] = 0b10000000000000000000000000000000;
  int check = vv_is_equal(origin, result);
    ck_assert_int_eq(1, check);
    ck_assert_int_eq(code_check, code);
#test vv_sub_13
  vv_decimal src1, src2, origin;
   int code_check = 0; int code =0;
  // src1 = 9999999999999999999;
  // src2 = -1;
  src1.bits[0] = 0b10001001111001111111111111111111;
  src1.bits[1] = 0b10001010110001110010001100000100;
  src1.bits[2] = 0b00000000000000000000000000000000;
  src1.bits[3] = 0b00000000000000000000000000000000;
  src2.bits[0] = 0b00000000000000000000000000000001;
  src2.bits[1] = 0b00000000000000000000000000000000;
  src2.bits[2] = 0b00000000000000000000000000000000;
  src2.bits[3] = 0b10000000000000000000000000000000;
  vv_decimal result = {0};
  code = vv_sub(src1, src2, &result);
  origin.bits[0] = 0b10001001111010000000000000000000;
  origin.bits[1] = 0b10001010110001110010001100000100;
  origin.bits[2] = 0b00000000000000000000000000000000;
  origin.bits[3] = 0b00000000000000000000000000000000;
  int check = vv_is_equal(origin, result);
    ck_assert_int_eq(1, check);
    ck_assert_int_eq(code_check, code);
#test vv_sub_14
  vv_decimal src1, src2, origin;
   int code_check = 0; int code =0;
  // src1 = 18446744073709551615;
  // src2 = -1;
  src1.bits[0] = 0b11111111111111111111111111111111;
  src1.bits[1] = 0b11111111111111111111111111111111;
  src1.bits[2] = 0b00000000000000000000000000000000;
  src1.bits[3] = 0b00000000000000000000000000000000;
  src2.bits[0] = 0b00000000000000000000000000000001;
  src2.bits[1] = 0b00000000000000000000000000000000;
  src2.bits[2] = 0b00000000000000000000000000000000;
  src2.bits[3] = 0b10000000000000000000000000000000;
  vv_decimal result = {0};
  code = vv_sub(src1, src2, &result);
  origin.bits[0] = 0b00000000000000000000000000000000;
  origin.bits[1] = 0b00000000000000000000000000000000;
  origin.bits[2] = 0b00000000000000000000000000000001;
  origin.bits[3] = 0b00000000000000000000000000000000;
  int check = vv_is_equal(origin, result);
    ck_assert_int_eq(1, check);
    ck_assert_int_eq(code_check, code);
#test vv_sub_15
  vv_decimal src1, src2, origin;
   int code_check = 0; int code =0;
  // src1 = 18446744073709551615.0;
  // src2 = -965453154;
  src1.bits[0] = 0b11111111111111111111111111110110;
  src1.bits[1] = 0b11111111111111111111111111111111;
  src1.bits[2] = 0b00000000000000000000000000001001;
  src1.bits[3] = 0b00000000000000010000000000000000;
  src2.bits[0] = 0b00111001100010111010010101100010;
  src2.bits[1] = 0b00000000000000000000000000000000;
  src2.bits[2] = 0b00000000000000000000000000000000;
  src2.bits[3] = 0b10000000000000000000000000000000;
  vv_decimal result = {0};
  code = vv_sub(src1, src2, &result);
  origin.bits[0] = 0b00111111011101000111010111001010;
  origin.bits[1] = 0b00000000000000000000000000000010;
  origin.bits[2] = 0b00000000000000000000000000001010;
  origin.bits[3] = 0b00000000000000010000000000000000;
  int check = vv_is_equal(origin, result);
    ck_assert_int_eq(1, check);
    ck_assert_int_eq(code_check, code);
#test vv_sub_16
  vv_decimal src1, src2, origin;
   int code_check = 0; int code =0;
  // src1 = -545454512454545.35265454545645;
  // src2 = -54564654;
  src1.bits[0] = 0b10000010111000100101101011101101;
  src1.bits[1] = 0b11111001111010000010010110101101;
  src1.bits[2] = 0b10110000001111101111000010010100;
  src1.bits[3] = 0b10000000000011100000000000000000;
  src2.bits[0] = 0b00000011010000001001011100101110;
src2.bits[1] = 0b00000000000000000000000000000000;
  src2.bits[2] = 0b00000000000000000000000000000000;
  src2.bits[3] = 0b10000000000000000000000000000000;
  vv_decimal result = {0};
  code = vv_sub(src1, src2, &result);
  origin.bits[0] = 0b01110001001010101101101011101101;
  origin.bits[1] = 0b00101110001111001110000111111000;
  origin.bits[2] = 0b10110000001111101110111101101101;
  origin.bits[3] = 0b10000000000011100000000000000000;
  int check = vv_is_equal(origin, result);
    ck_assert_int_eq(1, check);
    ck_assert_int_eq(code_check, code);
#test vv_sub_17
  vv_decimal src1, src2, origin;
   int code_check = 0; int code =0;
  // src1 = -545454512454545.35265454545645;
  // src2 = 5.352654545456454545645464;
  src1.bits[0] = 0b10000010111000100101101011101101;
  src1.bits[1] = 0b11111001111010000010010110101101;
  src1.bits[2] = 0b10110000001111101111000010010100;
  src1.bits[3] = 0b10000000000011100000000000000000;
  src2.bits[0] = 0b01001000000110110001111110011000;
  src2.bits[1] = 0b11111011111111011000100101101101;
  src2.bits[2] = 0b00000000000001000110110101110111;
  src2.bits[3] = 0b00000000000110000000000000000000;
  vv_decimal result = {0};
  code = vv_sub(src1, src2, &result);
  origin.bits[0] = 0b10110110001010011011010111011010;
  origin.bits[1] = 0b11111001111010100000110001111111;
  origin.bits[2] = 0b10110000001111101111000010010100;
  origin.bits[3] = 0b10000000000011100000000000000000;
  int check = vv_is_equal(origin, result);
    ck_assert_int_eq(1, check);
    ck_assert_int_eq(code_check, code);
#test vv_sub_18
  vv_decimal src1, src2, origin;
   int code_check = 0; int code =0;
  // src1 = 7961327845421.879754123131254;
  // src2 = 0;
  src1.bits[0] = 0b01001110111001000011100101110110;
  src1.bits[1] = 0b01001011001101011010000111011001;
  src1.bits[2] = 0b00011001101110010111010010111111;
  src1.bits[3] = 0b00000000000011110000000000000000;
  src2.bits[0] = 0b00000000000000000000000000000000;
  src2.bits[1] = 0b00000000000000000000000000000000;
  src2.bits[2] = 0b00000000000000000000000000000000;
  src2.bits[3] = 0b00000000000000000000000000000000;
  vv_decimal result = {0};
  code = vv_sub(src1, src2, &result);
  origin.bits[0] = 0b01001110111001000011100101110110;
  origin.bits[1] = 0b01001011001101011010000111011001;
  origin.bits[2] = 0b00011001101110010111010010111111;
  origin.bits[3] = 0b00000000000011110000000000000000;
  int check = vv_is_equal(origin, result);
    ck_assert_int_eq(1, check);
    ck_assert_int_eq(code_check, code);
#test vv_sub_19
  vv_decimal src1, src2, origin;
   int code_check = 0; int code =0;
  // src1 = 12345677.987654345678987654346;
  // src2 = -87654323456.9876545678987653;
  src1.bits[0] = 0b10010001000010101111010011001010;
  src1.bits[1] = 0b11000000010001011101010111110010;
  src1.bits[2] = 0b00100111111001000001101100000000;
  src1.bits[3] = 0b00000000000101010000000000000000;
  src2.bits[0] = 0b00010001110011011101000110000101;
  src2.bits[1] = 0b11110101101111000110111111000000;
  src2.bits[2] = 0b00000010110101010000111100111111;
  src2.bits[3] = 0b10000000000100000000000000000000;
  vv_decimal result = {0};
  code = vv_sub(src1, src2, &result);
  origin.bits[0] = 0b11010010000011011110010110111111;
  origin.bits[1] = 0b10100111010011100111001000100001;
  origin.bits[2] = 0b00011100010100111001110111101101;
  origin.bits[3] = 0b00000000000100010000000000000000;
  int check = vv_is_equal(origin, result);
    ck_assert_int_eq(1, check);
    ck_assert_int_eq(code_check, code);
#test vv_sub_20
  vv_decimal src1, src2, origin;
   int code_check = 0; int code =0;
  // src1 = -12345677.987654345678987654346;
  // src2 = -87654323456.9876545678987653;
  src1.bits[0] = 0b10010001000010101111010011001010;
  src1.bits[1] = 0b11000000010001011101010111110010;
  src1.bits[2] = 0b00100111111001000001101100000000;
  src1.bits[3] = 0b10000000000101010000000000000000;
  src2.bits[0] = 0b00010001110011011101000110000101;
  src2.bits[1] = 0b11110101101111000110111111000000;
  src2.bits[2] = 0b00000010110101010000111100111111;
  src2.bits[3] = 0b10000000000100000000000000000000;
  vv_decimal result = {0};
  code = vv_sub(src1, src2, &result);
  origin.bits[0] = 0b10010010000001100111100010100100;
  origin.bits[1] = 0b10001011011010100100100011011111;
  origin.bits[2] = 0b00011100010100011001001100010001;
  origin.bits[3] = 0b00000000000100010000000000000000;
  int check = vv_is_equal(origin, result);
    ck_assert_int_eq(1, check);
    ck_assert_int_eq(code_check, code);
#test vv_sub_21
  vv_decimal src1, src2, origin;
   int code_check = 0; int code =0;
  // src1 = 12345677.987654345678987654346;
  // src2 = 87654323456.9876545678987653;
  src1.bits[0] = 0b10010001000010101111010011001010;
  src1.bits[1] = 0b11000000010001011101010111110010;
  src1.bits[2] = 0b00100111111001000001101100000000;
  src1.bits[3] = 0b00000000000101010000000000000000;
  src2.bits[0] = 0b00010001110011011101000110000101;
  src2.bits[1] = 0b11110101101111000110111111000000;
  src2.bits[2] = 0b00000010110101010000111100111111;
  src2.bits[3] = 0b00000000000100000000000000000000;
  vv_decimal result = {0};
  code = vv_sub(src1, src2, &result);
  origin.bits[0] = 0b10010010000001100111100010100100;
  origin.bits[1] = 0b10001011011010100100100011011111;
  origin.bits[2] = 0b00011100010100011001001100010001;
  origin.bits[3] = 0b10000000000100010000000000000000;
  int check = vv_is_equal(origin, result);
    ck_assert_int_eq(1, check);
    ck_assert_int_eq(code_check, code);
#test vv_sub_22
  vv_decimal src1, src2, origin;
   int code_check = 0; int code =0;
  // src1 = -12345677.987654345678987654346;
  // src2 = 87654323456.9876545678987653;
  src1.bits[0] = 0b10010001000010101111010011001010;
  src1.bits[1] = 0b11000000010001011101010111110010;
  src1.bits[2] = 0b00100111111001000001101100000000;
  src1.bits[3] = 0b10000000000101010000000000000000;
  src2.bits[0] = 0b00010001110011011101000110000101;
  src2.bits[1] = 0b11110101101111000110111111000000;
  src2.bits[2] = 0b00000010110101010000111100111111;
  src2.bits[3] = 0b00000000000100000000000000000000;
  vv_decimal result = {0};
  code = vv_sub(src1, src2, &result);
  origin.bits[0] = 0b11010010000011011110010110111111;
  origin.bits[1] = 0b10100111010011100111001000100001;
  origin.bits[2] = 0b00011100010100111001110111101101;
  origin.bits[3] = 0b10000000000100010000000000000000;
  int check = vv_is_equal(origin, result);
    ck_assert_int_eq(1, check);
    ck_assert_int_eq(code_check, code);
#test vv_sub_23
  vv_decimal src1, src2, origin;
   int code_check = 0; int code =0;
  // src1 = 0;
  // src2 = 0;
  src1.bits[0] = 0b00000000000000000000000000000000;
  src1.bits[1] = 0b00000000000000000000000000000000;
  src1.bits[2] = 0b00000000000000000000000000000000;
  src1.bits[3] = 0b00000000000000000000000000000000;
  src2.bits[0] = 0b00000000000000000000000000000000;
  src2.bits[1] = 0b00000000000000000000000000000000;
  src2.bits[2] = 0b00000000000000000000000000000000;
  src2.bits[3] = 0b00000000000000000000000000000000;
  vv_decimal result = {0};
  code = vv_sub(src1, src2, &result);
  origin.bits[0] = 0b00000000000000000000000000000000;
  origin.bits[1] = 0b00000000000000000000000000000000;
  origin.bits[2] = 0b00000000000000000000000000000000;
  origin.bits[3] = 0b00000000000000000000000000000000;
  int check = vv_is_equal(origin, result);
    ck_assert_int_eq(1, check);
    ck_assert_int_eq(code_check, code);
#test vv_sub_24
  vv_decimal src1, src2, origin;
   int code_check = 0; int code =0;
  // src1 = 0;
  // src2 = 0;
  src1.bits[0] = 0b00000000000000000000000000000000;
  src1.bits[1] = 0b00000000000000000000000000000000;
  src1.bits[2] = 0b00000000000000000000000000000000;
  src1.bits[3] = 0b00000000000000000000000000000000;
  src2.bits[0] = 0b00000000000000000000000000000000;
  src2.bits[1] = 0b00000000000000000000000000000000;
  src2.bits[2] = 0b00000000000000000000000000000000;
  src2.bits[3] = 0b00000000000000000000000000000000;
  vv_decimal result = {0};
  code = vv_sub(src1, src2, &result);
  origin.bits[0] = 0b00000000000000000000000000000000;
  origin.bits[1] = 0b00000000000000000000000000000000;
  origin.bits[2] = 0b00000000000000000000000000000000;
  origin.bits[3] = 0b00000000000000000000000000000000;
  int check = vv_is_equal(origin, result);
    ck_assert_int_eq(1, check);
    ck_assert_int_eq(code_check, code);
#test vv_sub_25
  vv_decimal src1, src2, origin;
   int code_check = 0; int code =0;
  // src1 = 0;
  // src2 = 0;
  src1.bits[0] = 0b00000000000000000000000000000000;
  src1.bits[1] = 0b00000000000000000000000000000000;
  src1.bits[2] = 0b00000000000000000000000000000000;
  src1.bits[3] = 0b00000000000000000000000000000000;
  src2.bits[0] = 0b00000000000000000000000000000000;
  src2.bits[1] = 0b00000000000000000000000000000000;
  src2.bits[2] = 0b00000000000000000000000000000000;
  src2.bits[3] = 0b00000000000000000000000000000000;
  vv_decimal result = {0};
  code = vv_sub(src1, src2, &result);
  origin.bits[0] = 0b00000000000000000000000000000000;
  origin.bits[1] = 0b00000000000000000000000000000000;
  origin.bits[2] = 0b00000000000000000000000000000000;
  origin.bits[3] = 0b00000000000000000000000000000000;
  int check = vv_is_equal(origin, result);
    ck_assert_int_eq(1, check);
    ck_assert_int_eq(code_check, code);
#test vv_sub_26
  vv_decimal src1, src2, origin;
   int code_check = 0; int code =0;
  // src1 = 79228162514264337593543950335;
  // src2 = 1;
  src1.bits[0] = 0b11111111111111111111111111111111;
  src1.bits[1] = 0b11111111111111111111111111111111;
  src1.bits[2] = 0b11111111111111111111111111111111;
  src1.bits[3] = 0b00000000000000000000000000000000;
  src2.bits[0] = 0b00000000000000000000000000000001;
  src2.bits[1] = 0b00000000000000000000000000000000;
  src2.bits[2] = 0b00000000000000000000000000000000;
  src2.bits[3] = 0b00000000000000000000000000000000;
  vv_decimal result = {0};
  code = vv_sub(src1, src2, &result);
  origin.bits[0] = 0b11111111111111111111111111111110;
  origin.bits[1] = 0b11111111111111111111111111111111;
  origin.bits[2] = 0b11111111111111111111111111111111;
  origin.bits[3] = 0b00000000000000000000000000000000;
  int check = vv_is_equal(origin, result);
    ck_assert_int_eq(1, check);
    ck_assert_int_eq(code_check, code);
#test vv_sub_27
  vv_decimal src1, src2, origin;
   int code_check = 0; int code =0;
  // src1 = 7922816251427554395;
  // src2 = -65645646;
  src1.bits[0] = 0b01011111000010000000010001011011;
  src1.bits[1] = 0b01101101111100110111111101100111;
  src1.bits[2] = 0b00000000000000000000000000000000;
  src1.bits[3] = 0b00000000000000000000000000000000;
  src2.bits[0] = 0b00000011111010011010110001001110;
  src2.bits[1] = 0b00000000000000000000000000000000;
  src2.bits[2] = 0b00000000000000000000000000000000;
  src2.bits[3] = 0b10000000000000000000000000000000;
  vv_decimal result = {0};
  code = vv_sub(src1, src2, &result);
  origin.bits[0] = 0b01100010111100011011000010101001;
  origin.bits[1] = 0b01101101111100110111111101100111;
  origin.bits[2] = 0b00000000000000000000000000000000;
  origin.bits[3] = 0b00000000000000000000000000000000;
  int check = vv_is_equal(origin, result);
    ck_assert_int_eq(1, check);
    ck_assert_int_eq(code_check, code);
#test vv_sub_28
  vv_decimal src1, src2, origin;
   int code_check = 0; int code =0;
  // src1 = 665464545;
  // src2 = -8798232189789785;
  src1.bits[0] = 0b00100111101010100010111011100001;
  src1.bits[1] = 0b00000000000000000000000000000000;
  src1.bits[2] = 0b00000000000000000000000000000000;
  src1.bits[3] = 0b00000000000000000000000000000000;
  src2.bits[0] = 0b00010000010100101110011001011001;
  src2.bits[1] = 0b00000000000111110100000111110010;
  src2.bits[2] = 0b00000000000000000000000000000000;
  src2.bits[3] = 0b10000000000000000000000000000000;
  vv_decimal result = {0};
  code = vv_sub(src1, src2, &result);
  origin.bits[0] = 0b00110111111111010001010100111010;
  origin.bits[1] = 0b00000000000111110100000111110010;
  origin.bits[2] = 0b00000000000000000000000000000000;
  origin.bits[3] = 0b00000000000000000000000000000000;
  int check = vv_is_equal(origin, result);
    ck_assert_int_eq(1, check);
    ck_assert_int_eq(code_check, code);
#test vv_sub_29
  vv_decimal src1, src2, origin;
   int code_check = 0; int code =0;
  // src1 = 2.7986531268974139743;
  // src2 = -9.979623121254565121244554;
  src1.bits[0] = 0b11111110100100001101100101011111;
  src1.bits[1] = 0b10000100011001000010000111101000;
  src1.bits[2] = 0b00000000000000000000000000000001;
  src1.bits[3] = 0b00000000000100110000000000000000;
  src2.bits[0] = 0b11010100101011100011110110001010;
  src2.bits[1] = 0b01110100000101000010011110100011;
  src2.bits[2] = 0b00000000000010000100000101000100;
  src2.bits[3] = 0b10000000000110000000000000000000;
  vv_decimal result = {0};
  code = vv_sub(src1, src2, &result);
  origin.bits[0] = 0b10011010010111001101001011101010;
  origin.bits[1] = 0b10111110010100100100110100010011;
  origin.bits[2] = 0b00000000000010101001000111100111;
  origin.bits[3] = 0b00000000000110000000000000000000;
  int check = vv_is_equal(origin, result);
    ck_assert_int_eq(1, check);
    ck_assert_int_eq(code_check, code);
#test vv_sub_30
  vv_decimal src1, src2, origin;
   int code_check = 0; int code =0;
  // src1 = -9798956154578676.797564534156;
  // src2 = 2156878451.854764;
  src1.bits[0] = 0b01010100010000000011110110001100;
  src1.bits[1] = 0b10001011010100100000010101011001;
  src1.bits[2] = 0b00011111101010011000000110101101;
  src1.bits[3] = 0b10000000000011000000000000000000;
  src2.bits[0] = 0b01100101111100100100110110101100;
  src2.bits[1] = 0b00000000000001111010100110101011;
  src2.bits[2] = 0b00000000000000000000000000000000;
  src2.bits[3] = 0b00000000000001100000000000000000;
  vv_decimal result = {0};
  code = vv_sub(src1, src2, &result);
  origin.bits[0] = 0b11010101111011100000000010001100;
  origin.bits[1] = 0b01111000000001011001100110101101;
  origin.bits[2] = 0b00011111101010011000001000100010;
  origin.bits[3] = 0b10000000000011000000000000000000;
  int check = vv_is_equal(origin, result);
    ck_assert_int_eq(1, check);
    ck_assert_int_eq(code_check, code);
#test vv_sub_31
  vv_decimal src1, src2, origin;
   int code_check = 0; int code =0;
  // src1 = 0.5456465465486476846545465485;
  // src2 = -0.68985125146545154;
  src1.bits[0] = 0b00001011000011110111000010001101;
  src1.bits[1] = 0b10010110101100000101100101010001;
  src1.bits[2] = 0b00010001101000010111101110000001;
  src1.bits[3] = 0b00000000000111000000000000000000;
  src2.bits[0] = 0b00010111001001010100110000000010;
  src2.bits[1] = 0b00000000111101010001010110011011;
  src2.bits[2] = 0b00000000000000000000000000000000;
  src2.bits[3] = 0b10000000000100010000000000000000;
  vv_decimal result = {0};
  code = vv_sub(src1, src2, &result);
  origin.bits[0] = 0b01110000110111010100000010001101;
  origin.bits[1] = 0b01011010100111011110001100001010;
  origin.bits[2] = 0b00100111111010111100110001011010;
  origin.bits[3] = 0b00000000000111000000000000000000;
  int check = vv_is_equal(origin, result);
    ck_assert_int_eq(1, check);
    ck_assert_int_eq(code_check, code);
#test vv_sub_32
  vv_decimal src1, src2, origin;
   int code_check = 0; int code =0;
  // src1 = -0.77545545454546589781;
  // src2 = -87894515154546456456;
  src1.bits[0] = 0b10101100001010000001100001010101;
  src1.bits[1] = 0b00110100001010010001111010111100;
  src1.bits[2] = 0b00000000000000000000000000000100;
  src1.bits[3] = 0b10000000000101000000000000000000;
  src2.bits[0] = 0b00010011111011011111011110001000;
  src2.bits[1] = 0b11000011110010000000101111011001;
  src2.bits[2] = 0b00000000000000000000000000000100;
  src2.bits[3] = 0b10000000000000000000000000000000;
  vv_decimal result = {0};
  code = vv_sub(src1, src2, &result);
  origin.bits[0] = 0b10101111000101110100011110110110;
  origin.bits[1] = 0b01100110100011011000001100010111;
  origin.bits[2] = 0b00011100011001100111011011000001;
  origin.bits[3] = 0b00000000000010000000000000000000;
  int check = vv_is_equal(origin, result);
    ck_assert_int_eq(1, check);
    ck_assert_int_eq(code_check, code);
#test vv_sub_33
  vv_decimal src1, src2, origin;
   int code_check = 0; int code =0;
  // src1 = -79228162514264337593543950335;
  // src2 = -1;
  src1.bits[0] = 0b11111111111111111111111111111111;
  src1.bits[1] = 0b11111111111111111111111111111111;
  src1.bits[2] = 0b11111111111111111111111111111111;
  src1.bits[3] = 0b10000000000000000000000000000000;
  src2.bits[0] = 0b00000000000000000000000000000001;
  src2.bits[1] = 0b00000000000000000000000000000000;
  src2.bits[2] = 0b00000000000000000000000000000000;
  src2.bits[3] = 0b10000000000000000000000000000000;
  vv_decimal result = {0};
  code = vv_sub(src1, src2, &result);
  origin.bits[0] = 0b11111111111111111111111111111110;
  origin.bits[1] = 0b11111111111111111111111111111111;
  origin.bits[2] = 0b11111111111111111111111111111111;
  origin.bits[3] = 0b10000000000000000000000000000000;
  int check = vv_is_equal(origin, result);
    ck_assert_int_eq(1, check);
    ck_assert_int_eq(code_check, code);
#test vv_sub_34
  vv_decimal src1, src2, origin;
   int code_check = 0; int code =0;
  // src1 = 32323465788987654;
  // src2 = -67543278.89765424354657687;
  src1.bits[0] = 0b01011000010000110001100100000110;
  src1.bits[1] = 0b00000000011100101101011000000101;
  src1.bits[2] = 0b00000000000000000000000000000000;
  src1.bits[3] = 0b00000000000000000000000000000000;
  src2.bits[0] = 0b10111110000100011000010110010111;
  src2.bits[1] = 0b11011001001111010001001011000110;
  src2.bits[2] = 0b00000000000001011001011001001000;
  src2.bits[3] = 0b10000000000100010000000000000000;
  vv_decimal result = {0};
  code = vv_sub(src1, src2, &result);
  origin.bits[0] = 0b10000110010000000000000011011010;
  origin.bits[1] = 0b00110010000100100110010100111000;
  origin.bits[2] = 0b01101000011100010101100000100011;
  origin.bits[3] = 0b00000000000011000000000000000000;
  int check = vv_is_equal(origin, result);
    ck_assert_int_eq(1, check);
    ck_assert_int_eq(code_check, code);
#test vv_sub_35
  vv_decimal src1, src2, origin;
   int code_check = 0; int code =0;
  // src1 = -784515454.7989898652154545652;
  // src2 = 579895323215489956.67897455465;
  src1.bits[0] = 0b10110001001110110100010111110100;
  src1.bits[1] = 0b00111000100000111010110010000001;
  src1.bits[2] = 0b00011001010110010101110000011000;
  src1.bits[3] = 0b10000000000100110000000000000000;
  src2.bits[0] = 0b11100110001001011001001101101001;
  src2.bits[1] = 0b00111000110110101110001010110100;
  src2.bits[2] = 0b10111011010111111101000100011110;
  src2.bits[3] = 0b00000000000010110000000000000000;
  vv_decimal result = {0};
  code = vv_sub(src1, src2, &result);
  origin.bits[0] = 0b10011111111011011000101110000010;
  origin.bits[1] = 0b01111001100101101100001110101010;
  origin.bits[2] = 0b10111011010111111101000100100010;
  origin.bits[3] = 0b10000000000010110000000000000000;
  int check = vv_is_equal(origin, result);
    ck_assert_int_eq(1, check);
    ck_assert_int_eq(code_check, code);
#test vv_sub_36
  vv_decimal src1, src2, origin;
   int code_check = 0; int code =0;
  // src1 = 0;
  // src2 = 37986322154988653.784354545765;
  src1.bits[0] = 0b00000000000000000000000000000000;
  src1.bits[1] = 0b00000000000000000000000000000000;
  src1.bits[2] = 0b00000000000000000000000000000000;
  src1.bits[3] = 0b00000000000000000000000000000000;
  src2.bits[0] = 0b01001111101101000110000001100101;
  src2.bits[1] = 0b01000010001101101011011001100001;
  src2.bits[2] = 0b01111010101111011000110010011010;
  src2.bits[3] = 0b00000000000011000000000000000000;
  vv_decimal result = {0};
  code = vv_sub(src1, src2, &result);
  origin.bits[0] = 0b01001111101101000110000001100101;
  origin.bits[1] = 0b01000010001101101011011001100001;
  origin.bits[2] = 0b01111010101111011000110010011010;
  origin.bits[3] = 0b10000000000011000000000000000000;
  int check = vv_is_equal(origin, result);
    ck_assert_int_eq(1, check);
    ck_assert_int_eq(code_check, code);
#test vv_sub_37
  vv_decimal src1, src2, origin;
   int code_check = 0; int code =0;
  // src1 = 79228162514264337593543950335;
  // src2 = -1;
  src1.bits[0] = 0b11111111111111111111111111111111;
  src1.bits[1] = 0b11111111111111111111111111111111;
  src1.bits[2] = 0b11111111111111111111111111111111;
  src1.bits[3] = 0b00000000000000000000000000000000;
  src2.bits[0] = 0b00000000000000000000000000000001;
  src2.bits[1] = 0b00000000000000000000000000000000;
  src2.bits[2] = 0b00000000000000000000000000000000;
  src2.bits[3] = 0b10000000000000000000000000000000;
  vv_decimal result = {0};
  code = vv_sub(src1, src2, &result);
   code_check = 1;
  origin.bits[0] = 0b00000000000000000000000000000000;
  origin.bits[1] = 0b00000000000000000000000000000000;
  origin.bits[2] = 0b00000000000000000000000000000000;
  origin.bits[3] = 0b00000000000000010000000000000000;
  int check = vv_is_equal(origin, result);
    ck_assert_int_eq(1, check);
    ck_assert_int_eq(code_check, code);
#test vv_sub_38
  vv_decimal src1, src2, origin;
   int code_check = 0; int code =0;
  // src1 = 79228162514264337593543950300;
  // src2 = -991.2;
  src1.bits[0] = 0b11111111111111111111111111011100;
  src1.bits[1] = 0b11111111111111111111111111111111;
  src1.bits[2] = 0b11111111111111111111111111111111;
  src1.bits[3] = 0b00000000000000000000000000000000;
  src2.bits[0] = 0b00000000000000000010011010111000;
  src2.bits[1] = 0b00000000000000000000000000000000;
  src2.bits[2] = 0b00000000000000000000000000000000;
  src2.bits[3] = 0b10000000000000010000000000000000;
vv_decimal result = {0};
  code = vv_sub(src1, src2, &result);
   code_check = 1;
  origin.bits[0] = 0b00000000000000000000000000000000;
  origin.bits[1] = 0b00000000000000000000000000000000;
  origin.bits[2] = 0b00000000000000000000000000000000;
  origin.bits[3] = 0b00000000000000010000000000000000;
  int check = vv_is_equal(origin, result);
    ck_assert_int_eq(1, check);
    ck_assert_int_eq(code_check, code);
#test vv_sub_39
  vv_decimal src1, src2, origin;
   int code_check = 0; int code =0;
  // src1 = -79228162514264337593543950335;
  // src2 = 1;
  src1.bits[0] = 0b11111111111111111111111111111111;
  src1.bits[1] = 0b11111111111111111111111111111111;
  src1.bits[2] = 0b11111111111111111111111111111111;
  src1.bits[3] = 0b10000000000000000000000000000000;
  src2.bits[0] = 0b00000000000000000000000000000001;
  src2.bits[1] = 0b00000000000000000000000000000000;
  src2.bits[2] = 0b00000000000000000000000000000000;
  src2.bits[3] = 0b00000000000000000000000000000000;
  vv_decimal result = {0};
  code = vv_sub(src1, src2, &result);
code_check = 2;
  origin.bits[0] = 0b00000000000000000000000000000000;
  origin.bits[1] = 0b00000000000000000000000000000000;
  origin.bits[2] = 0b00000000000000000000000000000000;
  origin.bits[3] = 0b00000000000000010000000000000000;
  int check = vv_is_equal(origin, result);
    ck_assert_int_eq(1, check);
    ck_assert_int_eq(code_check, code);
#test vv_sub_40
  vv_decimal src1, src2, origin;
   int code_check = 0; int code =0;
  // src1 = -79228162514264337593543950300;
  // src2 = 991.2;
  src1.bits[0] = 0b11111111111111111111111111011100;
  src1.bits[1] = 0b11111111111111111111111111111111;
  src1.bits[2] = 0b11111111111111111111111111111111;
  src1.bits[3] = 0b10000000000000000000000000000000;
  src2.bits[0] = 0b00000000000000000010011010111000;
  src2.bits[1] = 0b00000000000000000000000000000000;
  src2.bits[2] = 0b00000000000000000000000000000000;
  src2.bits[3] = 0b00000000000000010000000000000000;
  vv_decimal result = {0};
  code = vv_sub(src1, src2, &result);
   code_check = 2;
  origin.bits[0] = 0b00000000000000000000000000000000;
  origin.bits[1] = 0b00000000000000000000000000000000;
  origin.bits[2] = 0b00000000000000000000000000000000;
  origin.bits[3] = 0b00000000000000010000000000000000;
  int check = vv_is_equal(origin, result);
    ck_assert_int_eq(1, check);
    ck_assert_int_eq(code_check, code);
#test vv_sub_41
  vv_decimal src1, src2, origin;
   int code_check = 0; int code =0;
  // src1 = 0.0;
  // src2 = 0.0;
  src1.bits[0] = 0b00000000000000000000000000000000;
  src1.bits[1] = 0b00000000000000000000000000000000;
  src1.bits[2] = 0b00000000000000000000000000000000;
  src1.bits[3] = 0b00000000000000010000000000000000;
src2.bits[0] = 0b00000000000000000000000000000000;
  src2.bits[1] = 0b00000000000000000000000000000000;
  src2.bits[2] = 0b00000000000000000000000000000000;
  src2.bits[3] = 0b10000000000000010000000000000000;
  vv_decimal result = {0};
  code = vv_sub(src1, src2, &result);
  origin.bits[0] = 0b00000000000000000000000000000000;
  origin.bits[1] = 0b00000000000000000000000000000000;
  origin.bits[2] = 0b00000000000000000000000000000000;
  origin.bits[3] = 0b00000000000000010000000000000000;
  int check = vv_is_equal(origin, result);
    ck_assert_int_eq(1, check);
    ck_assert_int_eq(code_check, code);
#test vv_sub_42
  vv_decimal src1, src2, origin;
   int code_check = 0; int code =0;
  // src1 = 1;
  // src2 = 0.0;
  src1.bits[0] = 0b00000000000000000000000000000001;
  src1.bits[1] = 0b00000000000000000000000000000000;
  src1.bits[2] = 0b00000000000000000000000000000000;
  src1.bits[3] = 0b00000000000000000000000000000000;
  src2.bits[0] = 0b00000000000000000000000000000000;
  src2.bits[1] = 0b00000000000000000000000000000000;
  src2.bits[2] = 0b00000000000000000000000000000000;
  src2.bits[3] = 0b10000000000000010000000000000000;
  vv_decimal result = {0};
  code = vv_sub(src1, src2, &result);
  origin.bits[0] = 0b00000000000000000000000000001010;
  origin.bits[1] = 0b00000000000000000000000000000000;
  origin.bits[2] = 0b00000000000000000000000000000000;
  origin.bits[3] = 0b00000000000000010000000000000000;
  int check = vv_is_equal(origin, result);
    ck_assert_int_eq(1, check);
    ck_assert_int_eq(code_check, code);
#test vv_sub_43
  vv_decimal src1, src2, origin;
   int code_check = 0; int code =0;
  // src1 = 1;
  // src2 = 0;
  src1.bits[0] = 0b00000000000000000000000000000001;
  src1.bits[1] = 0b00000000000000000000000000000000;
  src1.bits[2] = 0b00000000000000000000000000000000;
  src1.bits[3] = 0b00000000000000000000000000000000;
  src2.bits[0] = 0b00000000000000000000000000000000;
  src2.bits[1] = 0b00000000000000000000000000000000;
  src2.bits[2] = 0b00000000000000000000000000000000;
  src2.bits[3] = 0b00000000000000000000000000000000;
  vv_decimal result = {0};
  code = vv_sub(src1, src2, &result);
  origin.bits[0] = 0b00000000000000000000000000000001;
  origin.bits[1] = 0b00000000000000000000000000000000;
  origin.bits[2] = 0b00000000000000000000000000000000;
  origin.bits[3] = 0b00000000000000000000000000000000;
  int check = vv_is_equal(origin, result);ck_assert_int_eq(1, check);
    ck_assert_int_eq(code_check, code);
#test vv_sub_44
  vv_decimal src1, src2, origin;
   int code_check = 0; int code =0;
  // src1 = 0;
  // src2 = 0;
  src1.bits[0] = 0b00000000000000000000000000000000;
  src1.bits[1] = 0b00000000000000000000000000000000;
  src1.bits[2] = 0b00000000000000000000000000000000;
  src1.bits[3] = 0b00000000000000000000000000000000;
  src2.bits[0] = 0b00000000000000000000000000000000;
  src2.bits[1] = 0b00000000000000000000000000000000;
  src2.bits[2] = 0b00000000000000000000000000000000;
  src2.bits[3] = 0b00000000000000000000000000000000;
  vv_decimal result = {0};
  code = vv_sub(src1, src2, &result);
  origin.bits[0] = 0b00000000000000000000000000000000;
  origin.bits[1] = 0b00000000000000000000000000000000;
  origin.bits[2] = 0b00000000000000000000000000000000;
  origin.bits[3] = 0b00000000000000000000000000000000;
  int check = vv_is_equal(origin, result);
    ck_assert_int_eq(1, check);
    ck_assert_int_eq(code_check, code);
#test vv_sub_45
  vv_decimal src1, src2, origin;
   int code_check = 0; int code =0;
  // src1 = 0;//79,228,162,514,264,337,593,543,950,335 - 0.6 = 79,228,162,514,264,337,593,543,950,334
  // src2 = 0;
  src1.bits[0] = 0b11111111111111111111111111111111;
  src1.bits[1] = 0b11111111111111111111111111111111;
  src1.bits[2] = 0b11111111111111111111111111111111;
  src1.bits[3] = 0b00000000000000000000000000000000;
  src2.bits[0] = 0b00000000000000000000000000000110;
  src2.bits[1] = 0b00000000000000000000000000000000;
  src2.bits[2] = 0b00000000000000000000000000000000;
  src2.bits[3] = 0b00000000000000000000000000000000;
  set_scale(&src2,1);
  vv_decimal result = {0};
  code = vv_sub(src1, src2, &result);
  origin.bits[0] = 0b11111111111111111111111111111110;
  origin.bits[1] = 0b11111111111111111111111111111111;
  origin.bits[2] = 0b11111111111111111111111111111111;
  origin.bits[3] = 0b00000000000000000000000000000000;
  int check = vv_is_equal(origin, result);
    ck_assert_int_eq(1, check);
    ck_assert_int_eq(code_check, code);
