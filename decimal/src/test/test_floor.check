#test vv_floor_1
  vv_decimal src1, origin;
  // src1 = 2.3;

  src1.bits[0] = 0b00000000000000000000000000010111;
  src1.bits[1] = 0b00000000000000000000000000000000;
  src1.bits[2] = 0b00000000000000000000000000000000;
  src1.bits[3] = 0b00000000000000010000000000000000;
  vv_decimal result = {0};
vv_floor(src1,&result);
  origin.bits[0] = 0b00000000000000000000000000000010;
  origin.bits[1] = 0b00000000000000000000000000000000;
  origin.bits[2] = 0b00000000000000000000000000000000;
  origin.bits[3] = 0b00000000000000000000000000000000;
  ck_assert_int_eq(origin.bits[3], result.bits[3]);
  ck_assert_int_eq(origin.bits[2], result.bits[2]);
  ck_assert_int_eq(origin.bits[1], result.bits[1]);
  ck_assert_int_eq(origin.bits[0], result.bits[0]);

#test vv_floor_2
  vv_decimal src1, origin;
  // src1 = 2.32345878923458;

  src1.bits[0] = 0b00111101100101000000100011000010;
  src1.bits[1] = 0b00000000000000001101001101010001;
  src1.bits[2] = 0b00000000000000000000000000000000;
  src1.bits[3] = 0b00000000000011100000000000000000;
  vv_decimal result = {0};
vv_floor(src1,&result);
  origin.bits[0] = 0b00000000000000000000000000000010;
  origin.bits[1] = 0b00000000000000000000000000000000;
  origin.bits[2] = 0b00000000000000000000000000000000;
  origin.bits[3] = 0b00000000000000000000000000000000;
  ck_assert_int_eq(origin.bits[3], result.bits[3]);
  ck_assert_int_eq(origin.bits[2], result.bits[2]);
  ck_assert_int_eq(origin.bits[1], result.bits[1]);
  ck_assert_int_eq(origin.bits[0], result.bits[0]);

#test vv_floor_3
  vv_decimal src1, origin;
  // src1 = 79228162514264337593543950335;

  src1.bits[0] = 0b11111111111111111111111111111111;
  src1.bits[1] = 0b11111111111111111111111111111111;
  src1.bits[2] = 0b11111111111111111111111111111111;
  src1.bits[3] = 0b00000000000000000000000000000000;
  vv_decimal result = {0};
vv_floor(src1,&result);
  origin.bits[0] = 0b11111111111111111111111111111111;
  origin.bits[1] = 0b11111111111111111111111111111111;
  origin.bits[2] = 0b11111111111111111111111111111111;
  origin.bits[3] = 0b00000000000000000000000000000000;
  ck_assert_int_eq(origin.bits[3], result.bits[3]);
  ck_assert_int_eq(origin.bits[2], result.bits[2]);
  ck_assert_int_eq(origin.bits[1], result.bits[1]);
  ck_assert_int_eq(origin.bits[0], result.bits[0]);

#test vv_floor_4
  vv_decimal src1, origin;
  // src1 = 79228162514264337593543950335;

  src1.bits[0] = 0b11111111111111111111111111111111;
  src1.bits[1] = 0b11111111111111111111111111111111;
  src1.bits[2] = 0b11111111111111111111111111111111;
  src1.bits[3] = 0b00000000000000000000000000000000;
  vv_decimal result = {0};
vv_floor(src1,&result);
  origin.bits[0] = 0b11111111111111111111111111111111;
  origin.bits[1] = 0b11111111111111111111111111111111;
  origin.bits[2] = 0b11111111111111111111111111111111;
  origin.bits[3] = 0b00000000000000000000000000000000;
  ck_assert_int_eq(origin.bits[3], result.bits[3]);
  ck_assert_int_eq(origin.bits[2], result.bits[2]);
  ck_assert_int_eq(origin.bits[1], result.bits[1]);
  ck_assert_int_eq(origin.bits[0], result.bits[0]);

#test vv_floor_5
  vv_decimal src1, origin;
  // src1 = -79228162514264337593543950335;

  src1.bits[0] = 0b11111111111111111111111111111111;
  src1.bits[1] = 0b11111111111111111111111111111111;
  src1.bits[2] = 0b11111111111111111111111111111111;
  src1.bits[3] = 0b10000000000000000000000000000000;
  vv_decimal result = {0};
vv_floor(src1,&result);
  origin.bits[0] = 0b11111111111111111111111111111111;
  origin.bits[1] = 0b11111111111111111111111111111111;
  origin.bits[2] = 0b11111111111111111111111111111111;
  origin.bits[3] = 0b10000000000000000000000000000000;
  ck_assert_int_eq(origin.bits[3], result.bits[3]);
  ck_assert_int_eq(origin.bits[2], result.bits[2]);
  ck_assert_int_eq(origin.bits[1], result.bits[1]);
  ck_assert_int_eq(origin.bits[0], result.bits[0]);

#test vv_floor_6
  vv_decimal src1, origin;
  // src1 = -79228162514264337593543950335;

  src1.bits[0] = 0b11111111111111111111111111111111;
  src1.bits[1] = 0b11111111111111111111111111111111;
  src1.bits[2] = 0b11111111111111111111111111111111;
  src1.bits[3] = 0b10000000000000000000000000000000;
  vv_decimal result = {0};
vv_floor(src1,&result);
  origin.bits[0] = 0b11111111111111111111111111111111;
  origin.bits[1] = 0b11111111111111111111111111111111;
  origin.bits[2] = 0b11111111111111111111111111111111;
  origin.bits[3] = 0b10000000000000000000000000000000;
  ck_assert_int_eq(origin.bits[3], result.bits[3]);
  ck_assert_int_eq(origin.bits[2], result.bits[2]);
  ck_assert_int_eq(origin.bits[1], result.bits[1]);
  ck_assert_int_eq(origin.bits[0], result.bits[0]);

#test vv_floor_7
  vv_decimal src1, origin;
  // src1 = 0.0;

  src1.bits[0] = 0b00000000000000000000000000000000;
  src1.bits[1] = 0b00000000000000000000000000000000;
  src1.bits[2] = 0b00000000000000000000000000000000;
  src1.bits[3] = 0b00000000000000010000000000000000;
  vv_decimal result = {0};
vv_floor(src1,&result);
  origin.bits[0] = 0b00000000000000000000000000000000;
  origin.bits[1] = 0b00000000000000000000000000000000;
  origin.bits[2] = 0b00000000000000000000000000000000;
  origin.bits[3] = 0b00000000000000000000000000000000;
  ck_assert_int_eq(origin.bits[3], result.bits[3]);
  ck_assert_int_eq(origin.bits[2], result.bits[2]);
  ck_assert_int_eq(origin.bits[1], result.bits[1]);
  ck_assert_int_eq(origin.bits[0], result.bits[0]);

#test vv_floor_8
  vv_decimal src1, origin;
  // src1 = 0.3;

  src1.bits[0] = 0b00000000000000000000000000000011;
  src1.bits[1] = 0b00000000000000000000000000000000;
  src1.bits[2] = 0b00000000000000000000000000000000;
  src1.bits[3] = 0b00000000000000010000000000000000;
  vv_decimal result = {0};
vv_floor(src1,&result);
  origin.bits[0] = 0b00000000000000000000000000000000;
  origin.bits[1] = 0b00000000000000000000000000000000;
  origin.bits[2] = 0b00000000000000000000000000000000;
  origin.bits[3] = 0b00000000000000000000000000000000;
  ck_assert_int_eq(origin.bits[3], result.bits[3]);
  ck_assert_int_eq(origin.bits[2], result.bits[2]);
  ck_assert_int_eq(origin.bits[1], result.bits[1]);
  ck_assert_int_eq(origin.bits[0], result.bits[0]);

#test vv_floor_9
  vv_decimal src1, origin;
  // src1 = 0.0;

  src1.bits[0] = 0b00000000000000000000000000000000;
  src1.bits[1] = 0b00000000000000000000000000000000;
  src1.bits[2] = 0b00000000000000000000000000000000;
  src1.bits[3] = 0b10000000000000010000000000000000;
  vv_decimal result = {0};
vv_floor(src1,&result);
  origin.bits[0] = 0b00000000000000000000000000000000;
  origin.bits[1] = 0b00000000000000000000000000000000;
  origin.bits[2] = 0b00000000000000000000000000000000;
  origin.bits[3] = 0b10000000000000000000000000000000;
  ck_assert_int_eq(origin.bits[3], result.bits[3]);
  ck_assert_int_eq(origin.bits[2], result.bits[2]);
  ck_assert_int_eq(origin.bits[1], result.bits[1]);
  ck_assert_int_eq(origin.bits[0], result.bits[0]);

#test vv_floor_10
  vv_decimal src1, origin;
  // src1 = -0.3;

  src1.bits[0] = 0b00000000000000000000000000000011;
  src1.bits[1] = 0b00000000000000000000000000000000;
  src1.bits[2] = 0b00000000000000000000000000000000;
  src1.bits[3] = 0b10000000000000010000000000000000;
  vv_decimal result = {0};
vv_floor(src1,&result);
  origin.bits[0] = 0b00000000000000000000000000000001;
  origin.bits[1] = 0b00000000000000000000000000000000;
  origin.bits[2] = 0b00000000000000000000000000000000;
  origin.bits[3] = 0b10000000000000000000000000000000;
  ck_assert_int_eq(origin.bits[3], result.bits[3]);
  ck_assert_int_eq(origin.bits[2], result.bits[2]);
  ck_assert_int_eq(origin.bits[1], result.bits[1]);
  ck_assert_int_eq(origin.bits[0], result.bits[0]);

#test vv_floor_11
  vv_decimal src1, origin;
  // src1 = 79228162514264337593543933.3;

  src1.bits[0] = 0b00101000111101011100000111100101;
  src1.bits[1] = 0b11110101110000101000111101011100;
  src1.bits[2] = 0b00000010100011110101110000101000;
  src1.bits[3] = 0b00000000000000010000000000000000;
  vv_decimal result = {0};
vv_floor(src1,&result);
  origin.bits[0] = 0b10011101101100100010110011111101;
  origin.bits[1] = 0b01001011110001101010011111101111;
  origin.bits[2] = 0b00000000010000011000100100110111;
  origin.bits[3] = 0b00000000000000000000000000000000;
  ck_assert_int_eq(origin.bits[3], result.bits[3]);
  ck_assert_int_eq(origin.bits[2], result.bits[2]);
  ck_assert_int_eq(origin.bits[1], result.bits[1]);
  ck_assert_int_eq(origin.bits[0], result.bits[0]);

#test vv_floor_12
  vv_decimal src1, origin;
  // src1 = -79228162514264337593543933.3;

  src1.bits[0] = 0b00101000111101011100000111100101;
  src1.bits[1] = 0b11110101110000101000111101011100;
  src1.bits[2] = 0b00000010100011110101110000101000;
  src1.bits[3] = 0b10000000000000010000000000000000;
  vv_decimal result = {0};
vv_floor(src1,&result);
  origin.bits[0] = 0b10011101101100100010110011111110;
  origin.bits[1] = 0b01001011110001101010011111101111;
  origin.bits[2] = 0b00000000010000011000100100110111;
  origin.bits[3] = 0b10000000000000000000000000000000;
  ck_assert_int_eq(origin.bits[3], result.bits[3]);
  ck_assert_int_eq(origin.bits[2], result.bits[2]);
  ck_assert_int_eq(origin.bits[1], result.bits[1]);
  ck_assert_int_eq(origin.bits[0], result.bits[0]);

#test vv_floor_13
  vv_decimal src1, origin;
  // src1 = 79228162514264337593543934.3;

  src1.bits[0] = 0b00101000111101011100000111101111;
  src1.bits[1] = 0b11110101110000101000111101011100;
  src1.bits[2] = 0b00000010100011110101110000101000;
  src1.bits[3] = 0b00000000000000010000000000000000;
  vv_decimal result = {0};
vv_floor(src1,&result);
  origin.bits[0] = 0b10011101101100100010110011111110;
  origin.bits[1] = 0b01001011110001101010011111101111;
  origin.bits[2] = 0b00000000010000011000100100110111;
  origin.bits[3] = 0b00000000000000000000000000000000;
  ck_assert_int_eq(origin.bits[3], result.bits[3]);
  ck_assert_int_eq(origin.bits[2], result.bits[2]);
  ck_assert_int_eq(origin.bits[1], result.bits[1]);
  ck_assert_int_eq(origin.bits[0], result.bits[0]);

#test vv_floor_14
  vv_decimal src1, origin;
  // src1 = -79228162514264337593543934.3;

  src1.bits[0] = 0b00101000111101011100000111101111;
  src1.bits[1] = 0b11110101110000101000111101011100;
  src1.bits[2] = 0b00000010100011110101110000101000;
  src1.bits[3] = 0b10000000000000010000000000000000;
  vv_decimal result = {0};
vv_floor(src1,&result);
  origin.bits[0] = 0b10011101101100100010110011111111;
  origin.bits[1] = 0b01001011110001101010011111101111;
  origin.bits[2] = 0b00000000010000011000100100110111;
  origin.bits[3] = 0b10000000000000000000000000000000;
  ck_assert_int_eq(origin.bits[3], result.bits[3]);
  ck_assert_int_eq(origin.bits[2], result.bits[2]);
  ck_assert_int_eq(origin.bits[1], result.bits[1]);
  ck_assert_int_eq(origin.bits[0], result.bits[0]);

#test vv_floor_15
  vv_decimal src1, origin;
  // src1 = 79228162514264337593543934.8;

  src1.bits[0] = 0b00101000111101011100000111110100;
  src1.bits[1] = 0b11110101110000101000111101011100;
  src1.bits[2] = 0b00000010100011110101110000101000;
  src1.bits[3] = 0b00000000000000010000000000000000;
  vv_decimal result = {0};
vv_floor(src1,&result);
  origin.bits[0] = 0b10011101101100100010110011111110;
  origin.bits[1] = 0b01001011110001101010011111101111;
  origin.bits[2] = 0b00000000010000011000100100110111;
  origin.bits[3] = 0b00000000000000000000000000000000;
  ck_assert_int_eq(origin.bits[3], result.bits[3]);
  ck_assert_int_eq(origin.bits[2], result.bits[2]);
  ck_assert_int_eq(origin.bits[1], result.bits[1]);
  ck_assert_int_eq(origin.bits[0], result.bits[0]);

#test vv_floor_16
  vv_decimal src1, origin;
  // src1 = -79228162514264337593543934.8;

  src1.bits[0] = 0b00101000111101011100000111110100;
  src1.bits[1] = 0b11110101110000101000111101011100;
  src1.bits[2] = 0b00000010100011110101110000101000;
  src1.bits[3] = 0b10000000000000010000000000000000;
  vv_decimal result = {0};
vv_floor(src1,&result);
  origin.bits[0] = 0b10011101101100100010110011111111;
  origin.bits[1] = 0b01001011110001101010011111101111;
  origin.bits[2] = 0b00000000010000011000100100110111;
  origin.bits[3] = 0b10000000000000000000000000000000;
  ck_assert_int_eq(origin.bits[3], result.bits[3]);
  ck_assert_int_eq(origin.bits[2], result.bits[2]);
  ck_assert_int_eq(origin.bits[1], result.bits[1]);
  ck_assert_int_eq(origin.bits[0], result.bits[0]);

#test vv_floor_17
  vv_decimal src1, origin;
  // src1 = 79228162514264337593543934.0;

  src1.bits[0] = 0b00101000111101011100000111101100;
  src1.bits[1] = 0b11110101110000101000111101011100;
  src1.bits[2] = 0b00000010100011110101110000101000;
  src1.bits[3] = 0b00000000000000010000000000000000;
  vv_decimal result = {0};
vv_floor(src1,&result);
  origin.bits[0] = 0b10011101101100100010110011111110;
  origin.bits[1] = 0b01001011110001101010011111101111;
  origin.bits[2] = 0b00000000010000011000100100110111;
  origin.bits[3] = 0b00000000000000000000000000000000;
  ck_assert_int_eq(origin.bits[3], result.bits[3]);
  ck_assert_int_eq(origin.bits[2], result.bits[2]);
  ck_assert_int_eq(origin.bits[1], result.bits[1]);
  ck_assert_int_eq(origin.bits[0], result.bits[0]);

#test vv_floor_18
  vv_decimal src1, origin;
  // src1 = -79228162514264337593543934.0;

  src1.bits[0] = 0b00101000111101011100000111101100;
  src1.bits[1] = 0b11110101110000101000111101011100;
  src1.bits[2] = 0b00000010100011110101110000101000;
  src1.bits[3] = 0b10000000000000010000000000000000;
  vv_decimal result = {0};
vv_floor(src1,&result);
  origin.bits[0] = 0b10011101101100100010110011111110;
  origin.bits[1] = 0b01001011110001101010011111101111;
  origin.bits[2] = 0b00000000010000011000100100110111;
  origin.bits[3] = 0b10000000000000000000000000000000;
  ck_assert_int_eq(origin.bits[3], result.bits[3]);
  ck_assert_int_eq(origin.bits[2], result.bits[2]);
  ck_assert_int_eq(origin.bits[1], result.bits[1]);
  ck_assert_int_eq(origin.bits[0], result.bits[0]);
